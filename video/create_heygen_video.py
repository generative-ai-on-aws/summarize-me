import requests
import os
import time

def wait_for_heygen_video_completion(video_id, video_filename):
    """
    Poll the Heygen API until video generation is complete and save the video.

    Args:
        video_id (str): The ID of the video being generated by Heygen.
        video_filename (str): The local path where the video should be saved.

    Returns:
        None

    Raises:
        Exceptions from requests library if API communication fails.
    """
    api_key = os.getenv('HEYGEN_API_KEY')
    headers = {"Accept": "application/json", "X-API-KEY": api_key}

    video_status_url = f"https://api.heygen.com/v1/video_status.get?video_id={video_id}"
    while True:
        response = requests.get(video_status_url, headers=headers)
        # print(response)
        # print(response.json())
        status = response.json()["data"]["status"]

        if status == "completed":
            video_url = response.json()["data"]["video_url"]
            thumbnail_url = response.json()["data"]["thumbnail_url"]
            print(
                f"Video generation completed! \n\nVideo URL: {video_url} \n\nThumbnail URL: {thumbnail_url}\n\n"
            )
            # Save the video to a file        
            with open(video_filename, "wb") as video_file:
                video_content = requests.get(video_url).content
                video_file.write(video_content)
                print(f"Video saved to {video_filename}")
            break
        elif status == "processing" or status == "pending":
            print("Video is still processing. Checking status...")
            time.sleep(5)  # Sleep for 5 seconds before checking again
        elif status == "failed":
            error = response.json()["data"]["error"]
            print(f"Video generation failed. '{error}'")
            break        


def create_heygen_video(meeting_name, title1, bullet_point_list1, speaker_script_paragraph_list1, 
                       title2, bullet_point_list2, speaker_script_paragraph_list2):
    """
    Create a video using the Heygen API with the provided meeting information.

    Args:
        meeting_name (str): The name of the meeting.
        title1 (str): The title for the first section of the video.
        bullet_point_list1 (list): A list of bullet points for the first section.
        speaker_script_paragraph_list1 (list): A list of paragraphs for the speaker script of the first section.
        title2 (str): The title for the second section of the video.
        bullet_point_list2 (list): A list of bullet points for the second section.
        speaker_script_paragraph_list2 (list): A list of paragraphs for the speaker script of the second section.

    Returns:
        str: The video_id returned by the Heygen API for tracking video generation progress.

    Raises:
        SystemExit: If the API request fails or returns an error.
        Exceptions from requests library if API communication fails.
    """
    print(f"Creating video for {meeting_name}")

    template_id = os.getenv('HEYGEN_TEMPLATE_ID')
    api_key = os.getenv('HEYGEN_API_KEY')
    headers = {
        "Accept": "application/json", 
        "X-API-KEY": api_key,
        "Content-Type": "application/json"
    }

    generate_url = f"https://api.heygen.com/v2/template/{template_id}/generate"
    payload = {
        "test": False,
        "caption": False,
        "title": meeting_name,
        "variables": {
            "meeting_name": {
                "name": "meeting_name",
                "type": "text",
                "properties": {"content": meeting_name},
            },
            "title1": {
                "name": "title1",
                "type": "text",
                "properties": {"content": title1},
            },
            "body1": {
                "name": "body1",
                "type": "text",
                "properties": {"content": "\n".join(bullet_point_list1)},
            },
            "script1": {
                "name": "script1",
                "type": "text",
                "properties": {"content": speaker_script_paragraph_list1},
            },
            "title2": {
                "name": "title2",
                "type": "text",
                "properties": {"content": title2},
            },
            "body2": {
                "name": "body2",
                "type": "text",
                "properties": {"content": "\n".join(bullet_point_list2)},
            },
            "script2": {
                "name": "script2",
                "type": "text",
                "properties": {"content": speaker_script_paragraph_list2},
            },
        },
    }
    
    response = requests.post(generate_url, headers=headers, json=payload)
    if not response.json()["data"]:
        print(response)
        print(response.json()["error"])
        exit()
    
    video_id = response.json()["data"]["video_id"]
    print(f"video_id: {video_id}")
    return video_id

def save_to_file(content, file_path):
    """
    Save content to a file.

    This function opens the specified file in write mode and writes the provided content to it.
    If the file doesn't exist, it will be created. If it does exist, it will be overwritten.

    Args:
        content (str): The content to be saved to the file.
        file_path (str): The path to the output file.

    Raises:
        IOError: If there's an error writing to the file (e.g., permission denied, disk full).
    """
    with open(file_path, 'w') as f:
        f.write(content)